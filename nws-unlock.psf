<File version="3.2">
  <FileID>2246cf42-ff9c-48c6-a5ed-5fc7a5f4f102</FileID>
  <Preview>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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBPyz/8w/8GBUeq9VCa8rwAAAAASUVORK5CYII=</Preview>
  <Form>A8wn15ejqCYAACODCAAAAAAABADVWt9TIjkQfr+q+x9S83BPlDL8tk6pWmBXt5ZVD1BfrsrKzLSSMyTsJLPI
/fXXmQFBGSRhhdOyChlId39Jf93pTji+CP6BUKvm778Rcpw9ED0dw4nXnyoNo4MbJiI5UQdfZDzK
Xgsk76sCuYZYMSlOKgdF81cg7YTrJIYTAYmOKS+QyyTgLPwG04F8AHES1Ou0GlZr/lG5AsXGkUcE
HaHlO9R3ftO/ElyGDwMpuUfCIeNRjDJeWwodS668FDKCvozlGGI9nQl/CkMY61aitRTzMTiqB3eA
8iHMhgXpgDaXCjxyONd1OFe2TnmiZT+kHDpsBMLMFnHUCsQv24t+lxF4zS84jY0ybc5A6D77FwX8
YgkNleubLRl3tGQcQdzXU25ssUeIOoxyeb9R+Dt9ZCM02JKPKEi5gs0iTLiKnOOr11zx80a5vqax
vpSKaWa828bVwVmGMYDYKDuAR+010R7JDJJ8i59/otKZSFfSKAfmrfn8+DAdORfbHDo9Fg4NBlym
nUfQRaLHiX4tbHIIKsKhjL3mQI4LpCUxPDDSu3CnC6TH7oerbF1V0ZUhzTxTq1YwKkoWMhkVMsAW
w3tAowvBp4gzTlaJlkOZNHrKNVzNctW3EBjQ4KuIALns1+2G97Ucr2P+Oh6uEu8wo9D7JFSMtjTa
CuSj70arBSdKJXRBZTV/5WQURMk4E2C/qhmNlmHujkz1coGUim5Uqu2OSjMnE/9gdc7urMp2zp0T
Ktt/B6A0UkggJkORLYlV8etmZ7RmSZ5ta+f7PtK4ZMPihfetRqe+/IOOxn8aZMQJ2pWCa6YSytMd
v0XDh7bkaTJfw+vlXQ6rjPAhf1Vu0+9ebHXOlGrLUSD3kaXC4FZMxkr94FHgRiaDhGrNxP1nQQMO
kXVK+IoTWlKMA8wnz5ejr2PUXCAjFcqYs+Atptw0M42Cv82/cSyxHjF2/18cGsnzAodT1ZDuEEfW
cbzsbvv4reAsS26FQG6uXw6hPnCMAYjS8e0hFfeGQcv4bvOG/Gpg7TVXZ/UvZprYLbSeAsp2V1vw
oVquYhVZty8jXyJ1yOpl56xutaUvsvqs67CE9XYZfbEaHy2bG0NYyRn4ECU4AeXGvA4+duREzNrg
+WOXKZtOw5m32+8hS6VMseHG+JxFsid9yXdOhdU3KDE7VNPTmEXXDCY7Z1GExu7R2C2m4R8JxFPH
rphzOTHBM5CfoqiHCO0JsSTbweyvYWvxHij0GGaAZCR+RYMjgHUnAjay5rhrgTk79EI8beDchqGZ
3Bk2aEiEMzAHEEbdTM9MuXNx0bAPrBXe7KSfDJF9vEUxs5k2TrOQrh5JrT3TKNcwfKurEfla/NpU
Vxv60Hdep5zK/dYn5YZjeXIqd1qWVNzKEis0b1eNnMq3qUK6NAC+c0ZxY+UUdDfdXS8SfeVehcyT
1RbVQMqvkn3Oyofrxracq4zX2GZ1RJqyDXGRDBhBZCQf2rsmQv+v7iVVaiLjaG8UKPu+OwWWgNof
atadfW/fACEgshbRe/e5Yar5ZG8+9xv1rXw+B2rv8yNnn1tVG08+X4voXfv8/Oayb3qUgCo4k0rv
1fmmTHX1fR5gtwMxRxbY1xgGGpljI2vBufNhXzdf+ukQb4wJbNsrijSNO1SKz63a+7JYdL6asuEa
xnG2zPMk3h7SddXfR3Bl4nyK+SI7O9w2Pbe6U1d+uPu/2e9vtvmZQnYeYbE82Q9feqAQqde8+LZF
h+fc4qXz2mmXZ193p11eCogYJ9pFe1uOxrgE2BgbJT1Ao+bqyHo/c2sYn7F06WH+VjX/Azn0PJOo
JgAA</Form>
  <Code><![CDATA[
$formNWSUnlockTool_Load={
	#TODO: Initialize Form Controls here
	$cb_nwpssqldb.SelectedIndex = 0
	if (-not (Test-Path .\nws-unlock.log -PathType Leaf))
	{
		New-Item -Path . -Name "nws-unlock.log" -ItemType "file"
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
	else
	{
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
}

$buttonGo_Click={
	#TODO: Place custom script here
	$results = Get-Query_NWS
	$results1 = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
	$datagrid_sqlquery.DataSource = $results1
	
	#Update dropdown list with LoginID from Data Grid
	$comboboxlockedusers.DataSource = $datagrid_sqlquery.DataSource
	$comboboxlockedusers.DisplayMember = 'LoginID'
	
	if ($comboboxlockedusers.Text -ne "")
	{
		$buttonUnlockUser.Enabled = $true
		$comboboxlockedusers.Enabled = $true
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show('There are currently no users locked out in your ORI', 'Locked Users')
		$buttonUnlockUser.Enabled = $false
		$comboboxlockedusers.Enabled = $false
	}
	
}


function Test-SQLConnection
{
	[OutputType([bool])]
	Param
	(
		[Parameter(Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   Position = 0)]
		$ConnectionString
	)
	try
	{
		$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $ConnectionString
		$sqlConnection.Open();
		$sqlConnection.Close();
		$buttonGo.Enabled = $true
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Connected to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Connected to SQL")
	}
	catch
	{
		$buttonGo.Enabled = $false
		$datagrid_sqlquery.DataSource = $null
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to connect to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to connect to SQL")
	}
}

function Get-Query_NWS
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	$NWPSORI = "IN0480000"
	#Save this for later to add to QueryString
	#  And Users.DefaultORI = '$($NWPSORI)'
	
	#Database Query
	$QueryString = "Select Users.LoginID,
  Users.DefaultORI, Users.ModifiedDate
From Users
Where Users.InactiveFlag = 0 And Users.LockedOutFlag = 1"
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}


#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


function Set-NWSUnlock
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	#Database Query
	$QueryString = "update [NWSEnterpriseSecurity].[dbo].[Users]
set LockedOutFlag = 0
where LoginID =  '$($comboboxlockedusers.Text)'"
	
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}

#endregion


$buttonUnlockUser_Click={
	#TODO: Place custom script here
	if ($comboboxlockedusers.Text -ne "")
	{
		try
		{
			Set-NWSUnlock
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			$datagrid_sqlquery.DataSource = $null
		}
		
		catch
		{
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
		}
	}
	
	else
	{
		[System.Windows.Forms.MessageBox]::Show('Please make sure a user is selected', 'Selected User')
	}
	
	
}

$buttonTestConnection_Click={
	#TODO: Place custom script here
	Test-SQLConnection "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
}

$cb_nwpssqldb_SelectedIndexChanged={
	#TODO: Place custom script here
	$buttonGo.Enabled = $false
	$buttonUnlockUser.Enabled = $false
	$comboboxlockedusers.Enabled = $false
	$comboboxlockedusers.DataSource = $null
	$datagrid_sqlquery.DataSource = $null
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>