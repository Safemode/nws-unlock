<File version="3.2">
  <FileID>2246cf42-ff9c-48c6-a5ed-5fc7a5f4f102</FileID>
  <LastExport>132956500722502929</LastExport>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADjBSURBVHhe7d3Xc1xnnqf5vp35b3Zi73auNjZm
Ijq6O2JnY6urS11d1eVVKpUoiRKNaESCAEHvAHoSBA3oQRIeILz33nvvXcI74jvve3CSBFmQRDFZ
JA71fBhPIIG0J3HynF8mEuA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAfwj9r//1v6T88pe/TDl85HhKyMHDKSEhRERE5KUO
Hjxi9uGHUv7P//Z/pJh9u+37mZ1//q49+5Rf1aq6rgnVdo4RERGR1+oad0pMz9V//7/+u9zd/Hf7
xS8+SsmrbFV+fZ/Sy1qVQURERJ7L2YeXt6qiY1yRt+798ABw7NiJlMY+nzIq2pRV2U5ERETvoWxb
Vccbtf5yChsGlFVQ+cMDwKFDR1Ka+6acM+WYCyEiIqJ3W251pzMApBY3mZp/RE3Os/+8ms7nl1Xc
NKi07OLXHAD6p5VT3WUugIiIiN51WRXtupdQqPuJhXqQWPS86JQSRSeX6GFS8fPD64+33Y3LV1Je
vQrqup3LKm0ZVlrOaw4ALQPT5kzdyq99UUF9vwobepVvvl5Q32cO9zkXnl/Xq8J68/XaHuejPa6o
sd8c1/P8tM5h09rp1l3m8/O++Nr6np/X/7k5fVHjgNN3n89cj7ltGx9HRES0ubP7t+T8erNzLzaH
u82zePuKfLtyqzsUn1Ol2MwKZ8f+JL3M7OhrnFcLXpymU08L6vTQDAbFZl9sL6+sdUTpOSWvNwC0
DsyYM/U4O19bUWOf0vNLlVLQqJLmfmUUVislr1LZ1T3KK69XamGTCms7lF5cb46rUExKjjIq7MsO
fcosqlZmeYfyq5uVam5UQYPZgTf0Ozcsx5w3rahRhc5O3QwYZqHt9RXa45v6n5/XOc58LbukWrEp
GXqSlKnkwkYVNQ265zGDgTneGTxqWpWaX2MGDjOkuLefiIjIKxWZJ7EpZh/3JLXc2aHbl/Rzq7t0
Jy5XFy5H6UF0koKOXNLjmKcKP39T0Wmlyq40+2BzuszyNrOvbdBjc94Ssx+1l1feNqr03NccANqH
557vpG1lbYNKTknSrQdPVWgGgOTULD0xO/mnRS3KysvU3YQi5ZfXKc7snKMTspRZ0Wqe/XetnS81
w+ys21RYWa3HSXnOjjy3vMl5RSG7oEgxaRXOUJFV0uB8raxlUPmVzcqtaVOSuZ6UwmazU7dDwICK
G7qVlp2th/G5ZgffrezSBmdHb8+TV9Gk7KouFdc26XF8lvIbh1Ti3n4iIiKvVNo8qLSSFsWa/aN9
kmt37nnV3c6rApcio9XS0q6Kiho11DfrgvncntYOCDlVnc7AkF7cpCfplSpvHXYur6pzQhl5pT88
ABw8dDilc3RBpWananestsqOIaVlFSguNU8p+RVKySoyz7KrlZJbrJScEiVkFCnZfC2jtNlciTld
WpHZYQ+bKx1WakaO0ko7VVJb75wuMS1bjxPS9ORpvjKKypWUXa6nWfmKTc5UfGaZcuwgkZRhJp5G
pZqvPzGHk3JqzO0ZUkXHmArKq5SYVa603ELF2PNklJhBoFqx5nSxKdlKK65WwtMCFbWMqHzdMhAR
EXmhirZhZZa1KdbsxO0OPNd9X4B9Inz60gNFP4qXb3Jc12/e14Vb8c6b/OyP7XPtj+7NM/5MOzxk
VqmqY9S5vLoenzLzyl5vAOgeX1S5uQH2Rtiqu0bMjjzbPLPvVFZBju48THJuUHJykmKzqpRTXKp7
j1JUYJ5113SNKysnSzGZlart9SkjO1eppR0qqapRQlaxktJzlWtuoB0MkrKLlZyer5iUPJW2j5od
fo4ZBLL0tLRdTcOzSk9P1rWoJypsHlV1x4gqO8fNAFBphog8c7ocFduXNXLseTKVVt6t4ooqcx15
ZgAoVEnbmCrXLQMREZEXquocdd4EGJdR5TwZtz/mLmsZ1sOUYh0+Eqa42EQFHz6rhIQkhRw6o8S8
OpWYIcD/4/CsslbFZVWrpnvcubyGvmll5r/mANA7sWye9Y8600OVedZd0z2mrPwS5dQMqKalXY+e
JKmgZUzZOXlKKW5VeX2T2YkXmvMMKt08M7fPxLOqOlVrpo6y+hbFJ6eZ43PNgNBtLqfMfOwzg0S5
MoqqzKTS6AwQMUlmJ17corKmdsUnpSuttEHZ5vi0/HKl5JSrzAwI1d2TKqmuV1phvXJLy53zpBY1
qrShRQkpmYpPLzV3QJtS7ek7JszQ4F8GIiIib2R33Pbl/ASzE68w+75i88y/tHnIeZn/1qN0XX+Y
qqT8ekXcTdbd2Gxnx1/SNPTidGZ4SMiuUV3vpHN5TYOzzj7X3c1/NzsA9PmemWf9486z+b/J7IRr
uyecw7XPD0+Ynb35aG50VfuQKs0Nru2ZNF8fcz5Wdwyv+9qrl2nOa85X2TbkXHade3o7taxdrv3c
7PzNs/+XzzOxdh5z2H8eO6z4bxsREZEXqzc7bvsz//jMajWY/VuV2X/aajrG1dQ/q8b+GdWZ/WWT
+djYN2P2f2NrpzH7ylqzT8yr7DADQK0a+qecy2sZXlD26w4AA75VZ+dur+B55ka8OOzb4Gv+j+Y4
//HPj1v3teencz+uP836w04bHOd8vsHXXzq9+5GIiMhrmf1ZjXnSm5Bdp9j0KmcQeO0yqhWTVqmi
+n419E05l9c2sqTsworXGAAOmgFgWmYCmTL5d8RERET0rlrbB0+punPiR1fb7XN+7l/vXI5P7WPL
ynndAWDQGQCm1WCufGDUp5Fxn4bHiIiI6J1m979v0KipY9AMAD1T6hhbebMBYGxiUtNTk/L5iIiI
yAvNmP1295B9NSGAAWB0fO3CJieJiIjIC02Z/XYXAwAREdFPKwYAIqIfkc/n09TUFJGn2mhdZgAg
IvoRTUxMaHx8XGNjY0SeaGRkxFlvX12XGQCIiF6z+fl55eXl6ejRozp79qzCw8OJNnWnTp3SvXv3
NDMz47x6tX59ZgAgInrNFhYWFBsbq6ioKA0NDamzs5No09fb26u5ubm/WZ8ZAIiIXjM7AMTFxTmt
rq5qenqaaFM3OzvrvPxvXwF4dX1mACAies38A0BMTIyWlpY2PA3RZsq+7G/fB7ApBoAJ+0eDZuc0
OzOlSd+UM53MzMzKZ46bm5/XtLmx0+7XlldWtLK8oKnJCU3NzGnFfG7P57yZwZx3cdkcv7KsmWn7
te+5PrPg33eav8mcbmp67TyTkz5zG2ec27fhad95E/JNTTv3zcLcjCbM1+YXl7W8uGBuo7mf3Nv9
fFntfWxOZ5dp2izH9NTLPwPa/P2Y5V2/XiyZr/te/3v+PTnXYdfXt3BZP418Wlhadh6bdn2z37NX
T2O/NmPWR7sBevU453i7vprH7fR3PG4nzHX4z2+3B/7tw7x/+/DK6W2+Kbu9WXsszJhtzNQrPw99
nRgAyGttqgFgyjyge9qa1dU3qqmJYbW2tKqjq825kY01dRowD87e1jZ1trcoLSFOcU8LNDazqLGe
RsWaB11de79ZkGlNjQ+pID1RT54kqWNwXPOz02vXYS7H/qxjbcNihglzfX3dnerpHzYbo7VfhbDX
5b+9L94UYb+2dnjKbLT6e7rU1TtsbuOI2to6Nb7ueP/pZ831+Heoz49zLvvF19Z6cV2BDhJ2Zzg9
1q+n8bHKr2rRwuK8KrKTFZtRpIn5BQ32dKq7b8hZBntbJkaH1N7SpUnnfu9Q/5C5358PARvdVv9x
f7tML457+XR/z3xTZiM/2qeUuFgV1LRqcXFOZVlJissq0aRZ3gFnec33ySyTz+z8feODyk9LUGxs
qjrNim2HA/9tdZbBf7nfcftfPY399Zmh/h51dA84h189Pb2S+R7MzfpUkpmkmNhEdQ2OOI9Be5/a
dXd+btY53ZRv3DzGOzQ4Mu5+L9atU+bjtBne/I9b//3+4ntjjvdNPD//7Ny8hrsbzbbgiWq6h82g
uHYddsiwj1H/ID82PKD21m75zGV3t7ZrwJz3+WPBXvb6x6mbc9y6GADIa9n1eJMMAD49W11U9Int
+o+tF83Gu1rnj4frzKVwVTS26LOf/VxJdXW6fiJcV65c1r79JxV2/LQeJWXpxqnjOnf5sm5GJWt8
8ZmGG7P1+SdfK/LCKYUeO6vOkVmzM57R0uyQYh/GqbXfPLjNbVp9tqiUB9d1J7FCq1rWjHnAT4xP
mGcXs5qfN+eZnnZeeZi1Q4XZQNmPi0vzSnt4Q/fTmqWlTp0+GanhubVXGubNxsY+e1hZnFRKTKzz
3xAvm52S3bjZ806Mm+s1zxjnF8zpzB3uvMLhXIcdFqac8775s3CflpanFHMpTEdPXtCNWzHKiL2r
Y6HHdDb8jJ5kFyntUZSi4kvN6ebN7ZjTUFuxzuyLkHlOpgdHziq9rFPLywvPl9nZKJuNmr1dc2bD
aXei9jZPuq+y2NPNmWdN9nhneewGdd195Zxuw9v6Npoyy+HT4/OndezUBfO9j1V67J215Q07o9jc
Ej19cEt3kyrMxtjcv7OL6qvL1Pat+xRx/ozCrzzVrH0FyS6jvf/N7Z2ZnTPLaZ5ZmmWxg6L93G7U
7bLMme/ttDmtffVpfsGefkYrq89UlHhHF29naHFlYYPbSOubM+t9WcJ1HTx4Qndv3FR0ZpkWzI5y
enZeoz21evgoXRPmfn42N6iLp84qv75fC866uPZYtO+yt+vXyrN5Jd2NUHR6g1bN/T5lvhf28WO/
J/MLy+b8/c75S9vGtTTarjP7g3Um/Jz2HQ5X7cC0lsz3eHlpVrkpCcqr6tDi8rK6q7J0JiRKZg3Q
reAzym8c0JIZoO06bh/bdj1ZWLSPBbt+2HXFPnZffgWCAYC81qYaAJaXZvT03lX9ZUuwHsfFK+ru
I92LuKmrN65r/5HDenj7niLu3lVq4iMFHT6vc+fOmAEgW/fOh+hixGM1dQ+ajcySumoydeZyvKzo
sPNKTErV2eC9Onj4uH72vz5SfFGjMqNOace3p3T+TJj+8Oct2n/5unkG3K3Iw99q9/EoZcQ90ta/
7lBSSokSog7rs93Byqju1urqsnIeXdHXu08pOipc3wRfUFr8BX2xfZvii0t060SIDuw/ol///x8p
9Ow1nQ49oO07DqqwulMZN0/pq2+O6+7dh9r37W59e/CQQsNuqrwsV2EHv9Su0zfVMWwGgTcaAnxm
OJlV0o0TOnbiiuoazAB1Mlw1A8vS6qBuhF3VLXM/3k8sfzEAtBYrbF+kprSohLMRCjtyQl9v/VZp
6SV6Ehmsr0NP6e6DBwratVOff71Te3bu1s2YUrUVxeubbTt17XaMTh0NMfdBsPaFhivF7HTjrh/U
Z3tDlV3b67wsv/FtfRuZ5V2cUcK1Yzp+8prq3eWtH3kmLfe5yxuphylVLw0Au785pMjI84q4layi
5Bv6+ssgJT7N0/HdXyvMrDNProVp+65jun3pvp6aHcSdW3eVlJijp7H3dCzoM524e0/3b15RSMgp
XT7/rX7729/pyN1cPTPD5Ma3k5zMAD4/3q5Th8PUMTqtspynSi+sVmFShLbv26/Q0F36Xz//VI2j
c1pdHNal0+dU2DSihakeRYVt1xcHj6uytV43j5vHzd6jOnb4tG7ce6Qn6WlqqS/SyQNfaN/FaFWV
puhk0J/1r3/arbrRBVUn3taJi2vbgoJ7V/TZF4dU2d6n+qI4/X//83/o20tJembGfzsAhIXc0bz5
9+jkRYUfO66vtgYrN7tEdy/u1c5j58zj9rYOmHX7253btXPvWTV2jJmB+MUrPwwA5LU22QAwrbg7
N/Ug1u6wdyjkYrJaK2L15adfKy0zU0e++LN5tpWn2sIn+uKrEMXllWh0xkzoYwOKu3tRXwVf1tjS
qnrXDQAxF87q8oVrCj/4rf7jV7/VjtBINTXX6e6Z4/rrH/+o3/xhm1IK6hR3/7IuXr2jyFOh+tUf
t+jEydPau2evDu/co49+/h/as2eHwm+lmQHgmXLtALDnlB7fu6TPt3yp/SeuqbmhQAeCjyjs+D7t
2xOs3cEXFfswSifORas4PVqnz0To0dVz2vLxn/Sfv9+mSPMMKDzsohlybuov//ZL/eaTL/XVlh1K
q+rW4vyb7jjt8DCm8tw47di5S9vNbWwbn1VDXqz2hZzX3dtRistudu6X2Zk5DbeV6MyBy1oyn8df
uqSD+w5o916zMTY794/+7Tfav3eX/vSHL3X5UoTZQJ9XZWW+Th45o5g7Udq1bYt++as/6fSFSF08
e8EMaXe0b8tn+uUvfqXdu7fr3J0MLSz/vTeCZnl9YyrNijFD1i7t3Gd2Lr551WY/1v7QC7oTdUuJ
eW3O8s7Nrw0AW/+6XfeTs9Q90KHHF8+adetj7dh/UidCd+rgkSs6dzpU2785rOsXLyp0/1f67OMv
zPf3jHbvC1VBZZXuXjmkP316QNcvX9SV23EqMfd1WFS6lngF4PtbNwB0TiyoNPG6tnz6uX7zs4/0
zf795n7+iw5fTtDcyop5Bj+gy+GX1TRqdswlsTp/I1aleY/1hz/8RVExeVoaG1Vk0Lf6f/7vf1Zs
RZMSzuzVv//xc+0yO+ZPvtitisZ6XTLrZGXf9EsDQHH0Vf38Xz9Rdn2vipOu6XdmSMiu7jHD24p6
arJ15tBN53QPzpxVaHCQ9uwNVvAXX+mjX/5J+3Z/oz/+/gtFRT/VzXNB+txsf7IrusxO/8VjlQGA
vNamGwCeXL+sp+VdSrmyW7/66pJmRor17z//o3qGRxT0yS90NbVV9dmPFPm42HmwTg806ezl04q4
dlZBp25rwgwA9kcAX/zla0WeP61L1yN1/fA5BW87oM++2q7te0N0/dI1Bf/1W+0yO/jf/m6r9ppn
FEcundPFo+aB/+U+bdm+Xxcv3dS+v36mPftDdDxor9mIXFVGeZvzCkB69M21HwGs9Cr8+BmFnTmg
g4dCdPZWtKLNYLHls8/01bY9OmqeUd+KK1RjZZpCvjloLvuAdu3arf/cEqSYuFjdvHVfDx/e1VFz
HUeC9+ncrcdq7hvXrPNzyY3uo+/JN2WeLY2YnbxZjqhrCjp+RYmP7+r08ePa/vFH+nNwhNIfR+qL
HaG6/ThBncM+zU0M6vbVEN26d1vHzEASf+eedvz5L9oXdFDH9u/Vheu3FRZ2SfejH+nS1Wh1ddfr
tHlmFPRpkA58e0C/+vhLRd57oju37+nBw0c6ffiEeSa229xX15RV2aH5Nx5kXiPftBZ8Q7odZQa8
2xE6cOKqkp6Y5T1xQl/98Rf69NB1pUZH6AuzM7fL2zu+YDbyGWYwjHXWm7HmIu373U59Ywa8Pceu
6lrIXm3ZsV83z1/Up7/7ix4kxujAnm90M+KOtplno9np93Q0dI8Onz6ugycilFdgdhihe7Vrxxad
vp2pFV4B+MH8PwI4ZIaAyLOntOWLAwo/FKRjZh2LuhtpdrKH1TA4pdXFcZ0161Fo2DXduH5exw/v
1oHjpxRx84bCDwfrSniEgncd0q3r93Q+/IruR13RwW/36uqjRN2NPKtjB3frs63fqKJnxvkRQFhQ
sE6cPq8DpyL0+MF9Be89rqMHQ/W12blfvpOmOTMATA93KPJSiKLMY+HorSgl3LqlrR9/qgMH7GPh
W12KuqeTJ88pIbtcKVfP6He/+USxhU1aXJh7vnwMAOS1NtEAYK5wyqfe7k71Do1rcmRAjW0d8k2O
qqW5SePT0+pta9fgyISGB3rUad94ZXaUMzM+NVUWmAdekjrN+WbN6XzjQyrMSFZsbLLZ0ZnTjPQp
IzFReZX1aq4tV31Th2qLspSckaempmalJ8eroLpN89MTKniaqPSCSvV0digrNV09o1PqbSpVXFq2
+sannDctDfR2O28u802MmJ1ivwa7a5SYkqFh34xaSgqUV1ajnrZ6FRWVmWeawxoZ6ldv74BqC811
puWorrldfX296u42l9Pd4/wpxtLcFGWWNWhy+k1/q2Dtnc/97XXmvohXdXu/Vsyz0oq8dKVl5auw
tFp93S16mpSguJRM9Y2svQlqdLBTmelpau4d1mR/pzJSMzQwOauu+iIlZReqs7dffb296urq1fjY
iLm9/epqqFZSYrIq6pvNcvWpp6fHaWBoTJ2NJUow9+vgxLTzfga7gr1uGy/Xd2d/FtvbWmO+z3Gq
aR8wA+ScynJSlZppl7dKvV3NSk6MV2xKlvpGzeWPDqi9o8c8GzXrhFlPGkvzlJiUrtauflXmZqq8
sUP9TXVKz8zT8IRP3e2tGhoeUnvvoBZnRpSbnqiKpi71m/tj3AxczRX5Snyapi77RsM3Gdp+aj1/
E2CyEs193NI9rNG+FiUkpah1oF91pUVq67NvDJxWW22pEuJjlVlSpcbqPKXmVjivKNWXZCoxNVdt
nd1m2+JTe0ujegaHnMdPVmWLZnwjykqJV355tcbM99C+CXCkp8n5Az21PWNanh1TTlqycgpq1dlS
o7LyWmfbYn+mP9jborTUNLUNjGrUrDtpaVka8c2qpSJHKXkl6uzpddbxjqpSZZrPx8zjff22jQGA
vJbd7m6aAcBm32Rl3+XrvFnOvmPXbDTsm3/sTnHGfWe9Pc55k5l7ntn5RefXfJ4/czbPDv2/Bjhr
LstnTr9kjl8yz0Dm5hecN7TNLy5pxWxQ7BvA7K+RLc7Pyv4qkD2f/TUye4csOec3O4u5Ba0sLWra
XQ7nVwef/6rijPMmJntZ9rbNLixqyZzfbngW7eWY89s3ENmd8/PrNNdvL9+f3eDZX41aMrfF/05m
/7K9dhMTzl8fGxmzf9TB3G/jYxocNDt1e93m8icnxjUyOu4cZ2/TyPCwOd6c3nzN3r7x0VENj445
yzZmBpKxCbPcZnnGzNdGTXYlGR42Xzcf7YbVXo79VbtRc75R8zV7Gnt47Xzm8s1tGTTZ2/Q62fP7
fsRy23d/2zeEzZv727Jvtpw23+flZ6vS6jMzDCw8P06rK2bHY78Hc+YZm31TlxlOzHIurTyzRzrP
4paePTPfY3OeRXueZ86bGxfM4Xmzztnj7fLai7brhn0Tp/2+23XFnn/BfcOovT2v19r3/dVlsg9G
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
JKm9o8s95u/L/gogAwB5NbvebooBwD6I7Evh/gfUTzW7/HbD+erG84eyp7V/Zc2r+Zfh1eXaKPt/
Rtg/Y2x/bGAHH6/V3NKqDrOD8i+P/0Fo3w/S3Nxsjm95qRZTa2vr8149ftNllqGzs/Olv3Rol9Gu
33YIsB/tH0F6m42b65o3O2B/E+Y6Nzrd28oug33V0i6PfzkZAMhr+bc973UA8Gd3enbDYaf5n2p2
+e0gZDcqr7tD/Clmh0a70q49K/Zg5hn9+uXxf6/t9/1DyC7Pq+uv/dzuNDvMOm7Xc69nH6d2ePUv
JwMAeS277m6aAcBu1O1LnfTyzoHoQ+lDeozbZVm/bAwA5LU21QBAROTVGADIazEAEBG9hRgAyGsx
ABARvYUYAMhrMQAQEb2FGADIazEAEBG9hRgAyGsxABARvYUYAMhrMQAQEb2FGADIa22KAcD+4RD7
e7X2z4QSve/sumjXyY3WVaLvigGAvNamGADsBtf+XwCpqalKSkpScnIy0TvPrnt2HbT/D4NdJzda
V4m+KwYA8lqbYgCw/3nIo0eP9I//+I/66quv9NlnnxG98+y698///M+Kiopy/qOXjdZVou+KAYC8
1qYYAOz/IPbgwQPt3LlT6enpio+PJ3rn2XVvz549unnzJgMA/egYAMhrbZoB4OHDh9q6davzALp/
/z7RO8+ue9u3b9etW7cYAOhHxwBAXosBgMiNAYACiQGAvBYDAJEbAwAFEgMAeS0GACI3BgAKJAYA
8loMAERuDAAUSAwA5LUYAIjcGAAokBgAyGsxABC5MQBQIDEAkNdiACByYwCgQGIAIK/FAEDkxgBA
gcQAQF6LAYDIjQGAAokBgLwWAwCRGwMABRIDAHktBgAiNwYACiQGAPJaDABEbgwAFEgMAOS1GACI
3BgAKJAYAMhrMQAQuTEAUCAxAJDXYgAgcmMAoEBiACCvxQBA5MYAQIHEAEBeiwGAyI0BgAKJAYC8
FgMAkRsDAAUSAwB5LQYAIjcGAAokBgDyWgwARG4MABRIDADktRgAiNwYACiQGADIazEAELkxAFAg
MQCQ12IAIHJjAKBAYgAgr8UAQOTGAECBxABAXosBgMiNAYACiQGAvBYDAJEbAwAFEgMAeS0GACI3
BgAKJAYA8loMAERuDAAUSAwA5LUYAIjcGAAokBgAyGsxABC5MQBQIDEAkNdiACByYwCgQGIAIK/F
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
BRIDAHktBgAiNwYACiQGAPJaDABEbgwAFEgMAOS1GACI3BgAKJAYAMhrMQAQuTEAUCAxAJDXYgAg
cmMAoEBiACCvxQBA5MYAQIHEAEBeiwGAyI0BgAKJAYC8FgMAkRsDAAUSAwB5LQYAIjcGAAokBgDy
WgwARG4MABRIDADktRgAiNwYACiQGADIazEAELkxAFAgMQCQ12IAIHJjAKBAYgAgr8UAQOTGAECB
xABAXosBgMiNAYACiQGAvBYDAJEbAwAFEgMAea1NMwDYDbDd+KalpSk2NpbonWfXvV27dunGjRsM
APSjYwAgr7VpBoD4+Hj90z/9kz799FN9/PHHRO88u+79y7/8ix48eKDV1dUN11UKrJmpSc3P+D6I
5qZ9L23bGADIa22KAcB/I+rr61VZWamqqiqid55d9+rq6jQ6Ouqskxutq/RmTZgWzE6zc2BcBc3D
KmjxeGYZyttHNG0GGruhtMvIAEBea1MMABMTE5qamnIeNJsh+0Cem5ujn2h2XdxoPaU3zz5jLmod
0e6kfp3LG9XZAlO+dztnCs0Y0vm8AU2b7ZvdxjEAkNfaNK8AjI+Pq7+/X729verp6XE+vo+6u7s1
ODjo3KaNbisR/fgWzQAQ/LRPzSOLzvsrPhSHModVaAYbO+AwAJDX2hQDwOzsrNra2nTkyBGFhZ1R
eHj4eyksLEynTp1SQ0OD82C2r0xsdHuJ6Mc1Pz2pkNR+Tc6tmN3mM+d9P6+Tni2q4Ok1hR4+rOjE
VJWUFCuvaWBt72utrroHzEnt6V2rz1bNUSvKjYpQ8MFDCr/6WJP2qn/I6sa3Y6OsK8VjSq8fcgYc
BgDyWptmAGior9fZcxc0Mz2lkZFR83WfxkdHNDwyYj5/0fDwsMbGx83Oecw5vP64l04zYR6Qi/Oa
GFv7fGRkTLPzC5r2TXzn+WxDQ0POnTI9Pc0AQPSWsgPAQTMAjM4sm93mxjvUV7M6q9J17GqUBkdH
1VZfpohLZxWR26GpgWal5ZRoyZymq7pMpdWNzumHOmtVXNNqrsGa1b1vL6iooVeTPrNR0rJK8zNU
0zWqeV+/ikor1TXYq6K8QtW3NamkqFqz5gI3ui0bZV0qGlNmAwMAebNNMwC0tHfqwNY/Kiat0Azh
y8pIilVl+4TzIJs3xy8tL2tlxY7wqxob6lF716CWzWPw2fKSOf+cVuzE/2xJ01M+zczNa7CzQueD
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</Preview>
  <Form>OgAY1IOq5iYAACODCAAAAAAABADVWm1TIjkQ/n5V9x9S8+E+Ucrwbp1StcCubi2rHqB+uSorM9NKzpCwk8wi
9+uvMwOCMkjCCqdlFTKQTj/pfvolCccXwT8QatX8/TdCjrMHoqdjOPH6U6VhdHDDRCQn6uCLjEfZ
a4HkfVUg1xArJsVJ5aBo/gqknXCdxHAiINEx5QVymQSchd9gOpAPIE6Cep1Ww2rNPypXoNg48oig
I9R8h/Od3/SvBJfhw0BK7pFwyHgUo4zXlkLHkisvhYygL2M5hlhPZ8KfwhDGupVoLcV8DI7qwR2g
fAizYUE6oM2lAo8czuc6nE+2bvJEy35IOXTYCIRZLeKoFYhfthf9LiPwml9wGRtl2pyB0H32Lwr4
xRIqKtc3azLuaMk4grivp9zoYo8QdRjl8n6j8Hf6yEaosCUfUZByBZtFmHAVOcdXr7ni541yfU1j
fSkV08x4t43WwVWGMYDYKDuAR+01UR/JFJJ8jZ9/4qQzka6kUQ7MW/P58WE6ci62OXR6LBwaDGim
nUfQRaLHiX4tbHIIKsKhjL3mQI4LpCUxPDDSu3CnC6TH7oerbF2doitDmnmmVq1gVJQsZDIqZIAt
hveARheCTxFnnKwSLYcyafSUa2jNctW3EBjQ4KuIALns1+2G97Ucr2P+Oh6uEu8wo9D7JFSMujTq
CuSj70arBSdKJXRBZTV/5WQURMk4E2Bv1YxGyzB3R6Z6uUBKRTcq1XZHpZmTiX+wumZ3VmWVc+eE
yurvAJRGCgnEZCiyJbEqft1URmuW5Om2dr7vI41LNixeeN9qdOrLP+ho/KdBRpygXSm4ZiqhPK34
LRo+tCVPk/kaXi9XOewywod8q9ym370odc6UastRIPeRpcLgVkzGSv3gUeBGpg4+duREzDqm+WOX
KZuiZNZBtWbi/rOgAYfIOqF8RXMswcIB5pPnxuzrGGcukJEKZcxZ8BYGaxo7RcHf5t84ltjNGL3/
Lw4NxtjPcDj1HGl9ObLOAstksY/+Cq6y5NZG5FaK5QDsA8cIgigd3x5ScW8YtIzvNm/Ir4blXjN9
1j1jnordAvMpoGxr4oIP1XIVe9C6fRP6EqlDTSg71wSrhmBRE2Z7FktYb1cPFtb4aLXAKMI+0MCH
KMEFqH2WBGfebl9DlhqhYsON8TlGsid9yXdOhdU3aFA7VNPTmEXXDCY7Z1GEyu5R2S2m4R8JxFPH
PTXncmKCZyA/RVEPEdoTYkm2g9lfw9biPVDoMcwAyUj8ygyOANadJ9jImsOyBebsyAzxtIFzG4Zm
cme4vUMinIE5vjDTzeaZTe7cXDTsA2uFNzvZjYbIPt6imNnMJlCzkK4eaK09ESnXMHyrqxH5Wvza
dFcbdrHvvE85lfvtT8oNx/bkVO60Lam4tSVWaN6uGzmVb9OFdGkAfOeM4kbLKehuWl0vEn3l3oXM
k9UW3UDKr5J9zsqH68a2nIuQ19hmdcCasg1xkQwYQWQkH9q7JkL/r+4lVWoi42hvFCj7vjsFloDa
H4nWnX1vvwFCQGQtovfuc8NU88nefO436lv5fA7U3udHzj636jaefL4W0bv2+fnNZd/sUQKq4Ewq
vVfnmzbV1fd5gN0OxBxZYN9jGGhkjo2sBefOh33dm+mnQ7wxJrBtLzjSNO7QKT7Xau/LYtH5YsuG
axjHmZnnSbw9pOu6v4/gysT5FPNFdna4q3qudaeu/HC3h7Nf72zzI4fsPMLCPNnPZnqgEKnXvPi2
xQ7PeYuXrmunuzz7vjvd5aWAiHGiXbS35WiMJsCNsZmkB6jUXB1Z1zO3DeMzli49zN+q5n+QR64g
5iYAAA==</Form>
  <Code><![CDATA[
$formNWSUnlockTool_Load={
	#TODO: Initialize Form Controls here
	$cb_nwpssqldb.SelectedIndex = 0
	if (-not (Test-Path .\nws-unlock.log -PathType Leaf))
	{
		New-Item -Path . -Name "nws-unlock.log" -ItemType "file"
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
	else
	{
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
}

$buttonGo_Click={
	#TODO: Place custom script here
	$results = Get-Query_NWS
	$results1 = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
	$datagrid_sqlquery.DataSource = $results1
	
	#Update dropdown list with LoginID from Data Grid
	$comboboxlockedusers.DataSource = $datagrid_sqlquery.DataSource
	$comboboxlockedusers.DisplayMember = 'LoginID'
	
	if ($comboboxlockedusers.Text -ne "")
	{
		$buttonUnlockUser.Enabled = $true
		$comboboxlockedusers.Enabled = $true
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show('There are currently no users locked out in your ORI', 'Locked Users')
		$buttonUnlockUser.Enabled = $false
		$comboboxlockedusers.Enabled = $false
	}
	
}


function Test-SQLConnection
{
	[OutputType([bool])]
	Param
	(
		[Parameter(Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   Position = 0)]
		$ConnectionString
	)
	try
	{
		$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $ConnectionString
		$sqlConnection.Open();
		$sqlConnection.Close();
		$buttonGo.Enabled = $true
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Connected to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Connected to SQL")
	}
	catch
	{
		$buttonGo.Enabled = $false
		$datagrid_sqlquery.DataSource = $null
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to connect to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to connect to SQL")
	}
}

function Get-Query_NWS
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	$NWPSORI = "IN0480000"
	#Save this for later to add to QueryString
	#  And Users.DefaultORI = '$($NWPSORI)'
	
	#Database Query
	$QueryString = "Select Users.LoginID,
  Users.DefaultORI, Users.ModifiedDate
From Users
Where Users.InactiveFlag = 0 And Users.LockedOutFlag = 1"
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}


#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


function Set-NWSUnlock
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	#Database Query
	$QueryString = "update [NWSEnterpriseSecurity].[dbo].[Users]
set LockedOutFlag = 0
where LoginID =  '$($comboboxlockedusers.Text)'"
	
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}

#endregion


$buttonUnlockUser_Click={
	#TODO: Place custom script here
	if ($comboboxlockedusers.Text -ne "")
	{
		try
		{
			Set-NWSUnlock
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			$datagrid_sqlquery.DataSource = $null
		}
		
		catch
		{
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
		}
	}
	
	else
	{
		[System.Windows.Forms.MessageBox]::Show('Please make sure a user is selected', 'Selected User')
	}
	
	
}

$buttonTestConnection_Click={
	#TODO: Place custom script here
	Test-SQLConnection "Data Source=$($cb_nwpssqldb.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
}

$cb_nwpssqldb_SelectedIndexChanged={
	#TODO: Place custom script here
	$buttonGo.Enabled = $false
	$buttonUnlockUser.Enabled = $false
	$comboboxlockedusers.Enabled = $false
	$comboboxlockedusers.DataSource = $null
	$datagrid_sqlquery.DataSource = $null
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>