<File version="3.2">
  <FileID>2246cf42-ff9c-48c6-a5ed-5fc7a5f4f102</FileID>
  <LastExport>132956500722502929</LastExport>
  <Preview>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
kTKLnjo/Osit7lRxdb2yiqqUU1qnnOJKpeeUKqeyRYVVtXqUU24mnQ5lPilQen6lSswKN/TPmu/f
q6yCKjN01Cg922zsyxpUVFNvLrtYWSVPlV9Zq+yyNjUMzG4tMxERkcer751Sam6dsydf0TZiNugT
yqvu0oUrd3UpKVUJt7MVG39LV29nOW/0sz8ar2jdeuXgoTmf3fjby2kZXlRJ9Wv9GmBoxtDcc9Wb
PfcGpxk19E2pzkwijQNzZg99whkOGu1x9qM5TV2P+Zr5WN3S6/w83/7loUb7VwTNaSsae8zp7V8l
CqyQ/ThhBospc7nm6029Zs991pxnWpXNPc7E0mD25Ou7x5z3DNjLcb6/872mVGlOX2sur3lwVlXm
+9k3N3y9LGZZv1puIiIi72a3palmT77ebOcaemdU72xLZ9UytKjmoQW1mg178+CC83mD2VkP1GS2
oXZwsNtFezntY8sqrXnNAWB0QeYbz6l5e4PzX31sGQx83Druq49mgWz2sHN+exqzgIHTN3/18evD
LcPm9Pawc3572sDXv758p8Bxzmm2Lv+bp395OiIiIh/UaraPeVXdSstrUGZR82v3KL9R2eUdZhu5
tQ3tmlhTWU3LawwAwWYAWJRzRie70SUiIiLXs3v5dWbP/4cW2CG32/HuqQ2V177GAGD/96AxZwBY
VMfIgian54iIiGg3mpn/wU2ZpmfnNTRhXx1fUM/U5g8fADrNADA/P0dEREQeanFhTuNT/+IAMDc3
R0RERB5qwQwBYwwAREREv6wYAIiIXG52dlZLS0taW1sjcqXl5WXnfrf9fsgAQETkcouLi+rq6lJh
YaEKCgqIftJyc3PV1NTkDJ3b74cMAERELre+vq47d+4oPDxcDx48cA4T/VTduHFD9fX1zv1u+6sA
DABERC5nX5K9deuWysvLZW1sbBD9pC0sLDivPO3aADA7O6eVtXWtLC9qYXFJq/bnEkuLWlxe0fra
inPcyuqqNp+/MA+J51panNfiyprzAFk157ELvri8bM6zoPmFRa2uLGvulZ9pzM/PO20/7qdqdnZe
a+aKdZZzadl5UC+ZK3l5dU1ry0vOstr12VqdTefKXl7bkF680LI5j12f5dV188UX2txYM5c5rw17
4hfPtWLW0X59yVw39jqy19327721nt887k23YO4sSybnsLm+l8xyzJvDr17HX39uPi64c92/fvPO
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</Preview>
  <Form>ktOi1TcSUDAAACODCAAAAAAABADlWt9v4jgQfj/p/geLh3tCbQOUH7oWaYHddrW0ZQltHyuTuMVXE9PEWcr9
9TdOwgJNsowpUFanSlWhHvuLv2/GM+Oc3Qz/YY4Kmn/+QchZ/IGo2YSdF+xZoNj46J57rpwGR1+k
P45/F0nWv4rkjvkBl9555ehE/xRJOxQq9Nm5x0LlU1EkvXAouPONzQbymXnnw1qNnjqnVatRrrCT
eqNAPDqGlR9hvut7+9YT0nkeSCkKxBlx4fpgU2hLT/lSBIUIMoDu+XLCfDVLjD85DpuoVqiU9OZj
YFSfPTKwd1gybBgNaAsZsAI5ns91PJ8sb/JQSduhgnX4mHn6aQFHtUisMt70Srqs0PwCj7HWpi04
85TN/wUDyzopFUmlWlprpeloSd9lvq1mQq/FX5nb4VTIp7XGV/SVj2HBlnwFQyoCtt6Ee6Ym1/C7
0EzxvNbOVtRXPRlwxTW7bdgdeErHZ8xbaztgr6rQhPVIvCDJXvHzD5g0MelK6mbAfNDfnx1HI+dm
612nS4dM7Nx3hF7l+r5nd1pfvUBRUPyvvCdHp5HiBn6YZjJt0JUOjemwyjVwhQbCJuY/AyvCNnEH
7Q0ZbpfBOx1+9VwG2ixZmOGJTHo26bRILq6z45hxPP9tOR5K8JGdS8AZPnjTSRC8CL6RAjrwsSOn
XhI95h+7PEhHrOzoQ5Xi3tNnjw4Fc9FC+gqbsgQLBuhvVrfUVj7MXCTjwJG+4MNtbFtT79bEl+DS
esEPAqCY3t4VAObOVz5FO19aJXjfs+Apcc608L2TrOHLwdZmAjyIuZFBe0S9J62dNMyHrIFvorGx
c+4xOLekGg2A7KDPXkLuw0PuKz5XGpCqZBORH59TcA1CdMU4RKNOjzhEa2AkQkZyoZkLIU4cd66E
OP3U6K+ZAtI9gKU5MpLCErN1C5y/hmY2Z3k8teUyKMmQ2jqaWg2MADJiBO02YHc8CKmIDq4WdZ7b
Ukg/31GWow+k2s5z7sY8RP9+b5Dpc2ekH3AfScBNqCahMgwtnjOK9ktOigTcS0mo9brsURVJnz+N
MKf/QpK1ik7Q0tVKniRjwIjhfUbdG0/M0AEwlmy5UofyqYKJfkuaxbgUDLeVnOTVPnki30Kw2qeg
fFhLwVpD+WptGqZKuoItYyi4ApQcjnyG39VYRsswdyemWhl5kC5Jqbo7KSUkE+sooztw+Eeg/b27
pSOwitnkt0fgyvI7PQJRoyNG/6Ljyd/RMQjoPvIYXNmc7RyDH1AIj2RgeBb+L4tgd/ieClRH940K
UM2OQVVxalx8vrv21Ah3UnfuNdbGHUyID76ZL/zUMPZUWmiiWgLUVg2fBr5FatCUMI/HqCN5EY+T
vjES1vbi8GI3frcArBeCTEzDZ24IDxDsMwob63bzsP0mD7FqFXwcTG+SYRJiFgzTEdpcQR2q6IXP
3TvOpjtXkQuLPcFiDxCIX0LmzwyrWiHkVDvPQH5y3T4gxAtiybYD0V+xjc37LADGIAKEY+89MxgC
yKvoMbZJozHBHF9bAp42EwKj0NjuEgosEMIl0w0EPV0yTzK5cYJRxx8lKd3spB50QH2iRSGy6TJM
cYemLxVzexLlKqRMFUysWPgvqkP66zrywPOUC7nf/KRsWjVeyJ2mJSg9LNISFJrtZSMXcjtZyB6v
XC6Y6kan602obs2zkHdcuUT6Mr1yScE1U5vhlQuqxRmpDXCRGBgBZCQb2kELwf7e7dEgmEp/f7du
5WrdXAJLQPFNyZox9/gCSLehchEdOudaqfqbvXFeOt2M8zlQPOcNY84xHZoF57mIDppz/frOpQzU
fkkvbfb20xwomvSGZUw6PqWI3nzKhWTO+r7up9TPZt0EwtSmtwhRsDbIB1dXNWhiYtOCpTdocFle
vM3zUN0e0bwc73egMjTuVb6JwRtRGRr1HTegMt2wOfCKLHlPepOXCeKuA2J74heU+ywApIXmzTfz
PLtSMn0DJnqundZy+Ow6quUiQESTiPP2thxPYAug/NWT9Bksqu+G0KeXWVm4otKlD/M/g+Z/W7la
9FAwAAA=</Form>
  <Code><![CDATA[
$formNWSUnlockTool_Load={
	#TODO: Initialize Form Controls here
	$cb_nwpssqlhost.SelectedIndex = 0
	$cb_nwpssqlinstance.SelectedIndex = 0
	$buttonTestSQLConnection.Enabled = $false
	if (-not (Test-Path .\nws-unlock.log -PathType Leaf))
	{
		New-Item -Path . -Name "nws-unlock.log" -ItemType "file"
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
	else
	{
		$Output.Text = (Get-Content -Path ".\nws-unlock.log") -join "`n"
	}
}

$buttonGo_Click={
	#TODO: Place custom script here
	$results = Get-Query_NWS
	$results1 = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
	$datagrid_sqlquery.DataSource = $results1
	
	#Update dropdown list with LoginID from Data Grid
	$comboboxlockedusers.DataSource = $datagrid_sqlquery.DataSource
	$comboboxlockedusers.DisplayMember = 'LoginID'
	
	if ($comboboxlockedusers.Text -ne "")
	{
		$buttonUnlockUser.Enabled = $true
		$comboboxlockedusers.Enabled = $true
	}
	else
	{
		[System.Windows.Forms.MessageBox]::Show('There are currently no users locked out in your ORI', 'Locked Users')
		$buttonUnlockUser.Enabled = $false
		$comboboxlockedusers.Enabled = $false
	}
	
}


function Test-SQLConnection
{
	[OutputType([bool])]
	Param
	(
		[Parameter(Mandatory = $true,
				   ValueFromPipelineByPropertyName = $true,
				   Position = 0)]
		$ConnectionString
	)
	try
	{
		$sqlConnection = New-Object System.Data.SqlClient.SqlConnection $ConnectionString
		$sqlConnection.Open();
		$sqlConnection.Close();
		$buttonGo.Enabled = $true
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Connected to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Connected to SQL")
	}
	catch
	{
		$buttonGo.Enabled = $false
		$datagrid_sqlquery.DataSource = $null
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to connect to SQL")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to connect to SQL")
	}
}

function Get-Query_NWS
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	$NWPSORI = "IN0480000"
	#Save this for later to add to QueryString
	#  And Users.DefaultORI = '$($NWPSORI)'
	
	#Database Query
	$QueryString = "Select Users.LoginID,
  Users.DefaultORI, Users.ModifiedDate
From Users
Where Users.InactiveFlag = 0 And Users.LockedOutFlag = 1"
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqlhost.Text + "\" + $cb_nwpssqlinstance.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}


#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}



function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}


function Set-NWSUnlock
{
	[OutputType([System.Data.DataTable])]
	Param ()
	
	#Load the database assembly
	Add-Type -AssemblyName 'System.Data'
	
	#Database Query
	$QueryString = "update [NWSEnterpriseSecurity].[dbo].[Users]
set LockedOutFlag = 0
where LoginID =  '$($comboboxlockedusers.Text)'"
	
	#Database Connection String
	$ConnectionString = "Data Source=$($cb_nwpssqlhost.Text + "\" + $cb_nwpssqlinstance.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
	$command = New-Object System.Data.SqlClient.SqlCommand ($QueryString, $ConnectionString)
	$adapter = New-Object System.Data.SqlClient.SqlDataAdapter ($command)
	
	#Load the Dataset
	$dataset = New-Object System.Data.DataSet
	[void]$adapter.Fill($dataset)
	
	#Return the Dataset
	return @( ,$dataset.Tables[0])
}

#endregion


$buttonUnlockUser_Click={
	#TODO: Place custom script here
	if ($comboboxlockedusers.Text -ne "")
	{
		try
		{
			Set-NWSUnlock
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully Unlocked User " + $comboboxlockedusers.Text)
			$datagrid_sqlquery.DataSource = $null
		}
		
		catch
		{
			$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
			Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to Unlock User " + $comboboxlockedusers.Text + " Please contact MCIT")
		}
	}
	
	else
	{
		[System.Windows.Forms.MessageBox]::Show('Please make sure a user is selected', 'Selected User')
	}
	
	
}

$buttonTestSQLConnection_Click={
	#TODO: Place custom script here
	Test-SQLConnection "Data Source=$($cb_nwpssqlhost.Text + "\" + $cb_nwpssqlinstance.Text);Initial Catalog=NWSEnterpriseSecurity;Integrated Security=False;User ID=$($tb_nwpssqluser.Text);Password=$($tb_nwpssqlpass.Text)"
	
}

$buttonTestNetConnection_Click = {
	#TODO: Place custom script here
	#if ((Test-NetConnection -ComputerName $cb_nwpssqlhost.Text -InformationLevel Quiet).PingSucceeded)
	if ((Test-Connection -ComputerName $cb_nwpssqlhost.Text -Quiet -Count 1) -eq $true)
	{
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Successfully tested network connectivity to the New World Server")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Successfully tested network connectivity to the New World Server")
		$buttonTestSQLConnection.Enabled = $true
	}
	else
	{
		$Output.AppendText("`n " + (Get-Date -Format G) + " - Unable to verify connectivity to the server, please make sure you are on APN or LAN with access to New World Server")
		Add-Content .\nws-unlock.log ((Get-Date -Format G) + " - Unable to verify connectivity to the server, please make sure you are on APN or LAN with access to New World Server")
	}
}

$cb_nwpssqlhost_SelectedIndexChanged={
	#TODO: Place custom script here
	$buttonGo.Enabled = $false
	$buttonUnlockUser.Enabled = $false
	$comboboxlockedusers.Enabled = $false
	$comboboxlockedusers.DataSource = $null
	$datagrid_sqlquery.DataSource = $null
	$buttonTestSQLConnection.Enabled = $false
}


$cb_nwpssqlinstance_SelectedIndexChanged={
	#TODO: Place custom script here
	$buttonGo.Enabled = $false
	$buttonUnlockUser.Enabled = $false
	$comboboxlockedusers.Enabled = $false
	$comboboxlockedusers.DataSource = $null
	$datagrid_sqlquery.DataSource = $null
	$buttonTestSQLConnection.Enabled = $false
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>